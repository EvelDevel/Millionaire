
//  Created by Евгений Никитин on 11.05.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

class StringAndCharactersSet {
    static func getQuestions() -> [Question] {
        return [
            Question(question: ["Строка, это совокупность ... ? ",
                                "Продолжите фразу, строка - это совокупность ...",
                                "Строка, это совокупность чего?"],
                     image: "",
                     optionA: "Unicode-символов",
                     optionB: "Отдельных букв",
                     optionC: "Цифр",
                     optionD: "Слов",
                     correctAnswer: 1,
                     questionId: 1,
                     helpText: "Строка представляет собой совокупность символов. Каждая строка состоит из независимых от кодировки символов Unicode, и обеспечивает поддержку доступа к этим символам в различных Unicode представлениях."),
            
            Question(question: ["Каким типом представлены строки в Swift?",
                                "Какой тип у строки в Swift?",
                                "В Swift у строки именно этот тип"],
                     image: "",
                     optionA: "String",
                     optionB: "Character",
                     optionC: "Decimal",
                     optionD: "Text",
                     correctAnswer: 1,
                     questionId: 2,
                     helpText: "Строки в Swift представлены типом String."),
            
            Question(question: ["Фиксированная последовательность символов, окруженная двойными кавычками",
                                "Последовательность произвольных символов внутри двойных кавычек",
                                "Этот литерал состоит из какой-либо последовательности символов"],
                     image: "",
                     optionA: "Числовой литерал",
                     optionB: "Строковый литерал",
                     optionC: "Литерал",
                     optionD: "Натурал",
                     correctAnswer: 2,
                     questionId: 3,
                     helpText: "Фиксированная последовательность символов, окруженная двойными кавычками, называется строковым литералом. Обычно используется как начальное значение для инициализации константы или переменной, при этом тип можно объявить неявно."),
            
            Question(question: ["Cколько двойных кавычек нужно ставить при открытии и закрытии многострочного строкового литерала?",
                                "Какое количество двойных кавычек ставится при открытии многострочного строкового литерала?",
                                "При закрытии открытии многострочного строкового литерала ставится именно столько двойных кавычек"],
                     image: "",
                     optionA: "1",
                     optionB: "2",
                     optionC: "3",
                     optionD: "4",
                     correctAnswer: 3,
                     questionId: 4,
                     helpText: "Если вам нужно создать строку, которая поддерживает многострочный вид, используйте литерал многострочной строки - последовательность символов, обернутых в три двойные кавычки. Многострочный литерал строки включает в себя все строки между тремя открывающими и тремя закрывающими кавычками. Строка начинается на первой строке после открывающих кавычек, а заканчивается на строке предшествующей закрывающим кавычкам."),
            
            Question(question: ["Каким символом осуществляется перенос строки в многострочном строковом литерале (в коде), позволяющий не отображать символ переноса строки в качестве части значения этой строки?",
                                "Этот символ может перенести строку многострочного литерала только внутри кода (для лучшего чтения), не отображая перенос строки как часть значения этой строки"],
                     image: "",
                     optionA: "Звездочка",
                     optionB: "Обратный слеш",
                     optionC: "Нажимаем Enter",
                     optionD: "Тире",
                     correctAnswer: 2,
                     questionId: 5,
                     helpText: "Если вы хотите использовать символ переноса строки для того, чтобы сделать ваш код более читаемым, но вы не хотите чтобы символ переноса строки отображался в качестве части значения строки, то вам нужно использовать символ обратного слеша в конце этих строк. Проще говоря, если вы хотите перенести строку внутри кода, чтобы сделать его более читаемым, но не хотите, чтобы после компиляции эта строка также перенеслась."),
            
            Question(question: ["Как мы можем включить в строку специальные символы, не вызывая эффекта этих символов?",
                                "Вы можете включить в строку специальные символы, не вызывая их эффекта, как?",
                                "Как мы можем включить специальные символы в строку, при этом не вызывая их эффекта?"],
                     image: "",
                     optionA: "Кавычки, обернутые знаком #",
                     optionB: "Кавычки внутри \\",
                     optionC: "Через экранирование",
                     optionD: "Никак",
                     correctAnswer: 1,
                     questionId: 6,
                     helpText: "Вы можете поместить строковый литерал внутрь расширенного разделителя, чтобы включить в строку специальные символы, не вызывая эффекта самих символов. Вы помещаете вашу строку в кавычки, и оборачиваете ее знаками #."),
            
            Question(question: ["Как можно инициализировать пустую строку?",
                                "Как инициализируется пустой тип String?",
                                "Инициализация пустой строки происходит именно таким(ими) способом(ами)"],
                     image: "",
                     optionA: "= (String))",
                     optionB: "= [String]",
                     optionC: "= String()",
                     optionD: "Затрудняюсь ответить",
                     correctAnswer: 3,
                     questionId: 7,
                     helpText: "Чтобы создать пустое String значение в качестве отправной точки для создания более длинных строк, либо присвойте литерал пустой строки к переменной, либо инициализируйте объект String c помощью синтаксиса инициализации: = String()."),
            
            Question(question: ["Через какой свойство типа String мы можем узнать, является ли строка пустой?",
                                "Как узнать, является ли строка пустой?",
                                "Через это свойство мы можем узнать, является ли String пустым"],
                     image: "",
                     optionA: ".isEmpty",
                     optionB: ".count",
                     optionC: ".capacity",
                     optionD: ".removeRange",
                     correctAnswer: 1,
                     questionId: 8,
                     helpText: "Можно узнать пустое ли String значение, через его Boolean свойство isEmpty."),
            
            Question(question: ["Какой результат возвращает свойство .isEmpty, примененное к строке?",
                                "Свойство .isEmpty, примененное к строке, возвращает этот результат",
                                "Какой результат вернет .isEmpty, примененное к String значению?"],
                     image: "",
                     optionA: "true или false",
                     optionB: "1 или 0",
                     optionC: "nil или количество символов",
                     optionD: "Ничего не возвращает",
                     correctAnswer: 1,
                     questionId: 9,
                     helpText: "Свойство .isEmpty возвращает true или false"),
            
            Question(question: ["Чему мы должны присвоить String-значение, чтобы его можно было модифицировать?",
                                "Как присвоить String-значение, чтобы в дальнейшем мы могли его изменять?",
                                "Чтобы мы могли модифицировать String-значение, чему мы должны его присвоить?"],
                     image: "",
                     optionA: "Переменной",
                     optionB: "Константе",
                     optionC: "NSMutableString",
                     optionD: "String-значения неизменяемы",
                     correctAnswer: 1,
                     questionId: 10,
                     helpText: "Вы можете указать, может ли конкретный String быть модифицирован, путем присвоения его переменной ( в этом случае он может быть модифицирован), или присвоения его константе ( в этом случае он не может быть модифицирован)."),
            
            Question(question: ["Что происходит с String значением при передаче в функцию или метод?",
                                "При присваивании существующего String значения другой переменной, что происходит со значением?",
                                "Когда String значение присваивается новой константе, что происходит?"],
                     image: "",
                     optionA: "Создается копия значения",
                     optionB: "Превращается в ссылку",
                     optionC: "Ничего не происходит",
                     optionD: "Присваивается исходное значение",
                     correctAnswer: 1,
                     questionId: 11,
                     helpText: "Тип String в Swift является типом значения. Когда вы создаёте новое String значение, это значение копируется, когда оно передается функции или методу, или когда оно присваивается константе или переменной. В каждом случае создается новая копия существующего String значения, и передаётся либо присваивается новая копия, а не исходная версия."),
            
            Question(question: ["Когда вы передаете функции или методу String значение, что с ним происходит?",
                                "Что происходит со String значением при передаче его функции или методу?",
                                "Что произойдет со String значением, когда вы передаете его функции или методу?"],
                     image: "",
                     optionA: "Ничего",
                     optionB: "Модифицируется",
                     optionC: "Округлится",
                     optionD: "Возврат в исходное состояние",
                     correctAnswer: 1,
                     questionId: 12,
                     helpText: "Подход \"копировать по умолчанию\" для String в Swift позволяет быть уверенным в том, что когда вы передаете функции либо методу String значение, то очевидно, что вы имеете точно то же String значение, независимо от того, откуда она пришла. Вы можете быть уверены, что строка, которая вам передана, не будет модифицирована, если вы не модифицируете ее сами."),
            
            Question(question: ["Когда происходит копирование строк в Swift?",
                                "Копирование строк в Swift происходит в этот момент",
                                "В какой момент происходит копирование строк в Swift?"],
                     image: "",
                     optionA: "Когда оно необходимо",
                     optionB: "После запуска Xcode",
                     optionC: "При запуске компилятора",
                     optionD: "При индексации файлов",
                     correctAnswer: 1,
                     questionId: 13,
                     helpText: "Компилятор Swift оптимизирует использование строк, так что фактическое копирование строк происходит только тогда, когда оно действительно необходимо. Это означает, что вы всегда получаете высокую производительность, при работе со строками, как с типами значений."),
            
            Question(question: ["К чему мы получим доступ, итерируя строку внутри цикла for-in?",
                                "К чему можно получить доступ, при итерации String значения внутри цикла for-in?"],
                     image: "",
                     optionA: "К каждому Character",
                     optionB: "К индексам каждой буквы",
                     optionC: "К количеству символов",
                     optionD: "Ни к чему",
                     correctAnswer: 1,
                     questionId: 14,
                     helpText: "Тип String в Swift представляет собой коллекцию значений Character в указанном порядке. Вы можете получить доступ к отдельным значениям Character в строке с помощью итерации по этой строке в for-in цикле."),
            
            Question(question: ["",
                                "",
                                ""],
                     image: "",
                     optionA: "",
                     optionB: "",
                     optionC: "",
                     optionD: "",
                     correctAnswer: 1,
                     questionId: 15,
                     helpText: ""),
            
            Question(question: ["",
                                "",
                                ""],
                     image: "",
                     optionA: "",
                     optionB: "",
                     optionC: "",
                     optionD: "",
                     correctAnswer: 1,
                     questionId: 16,
                     helpText: ""),
            
            Question(question: ["",
                                "",
                                ""],
                     image: "",
                     optionA: "",
                     optionB: "",
                     optionC: "",
                     optionD: "",
                     correctAnswer: 1,
                     questionId: 17,
                     helpText: ""),
            
            Question(question: ["",
                                "",
                                ""],
                     image: "",
                     optionA: "",
                     optionB: "",
                     optionC: "",
                     optionD: "",
                     correctAnswer: 1,
                     questionId: 18,
                     helpText: ""),
            
            Question(question: ["",
                                "",
                                ""],
                     image: "",
                     optionA: "",
                     optionB: "",
                     optionC: "",
                     optionD: "",
                     correctAnswer: 1,
                     questionId: 19,
                     helpText: ""),
            
            Question(question: ["",
                                "",
                                ""],
                     image: "",
                     optionA: "",
                     optionB: "",
                     optionC: "",
                     optionD: "",
                     correctAnswer: 1,
                     questionId: 20,
                     helpText: "")
        ]
    }
}
