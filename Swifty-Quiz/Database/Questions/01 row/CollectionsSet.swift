
//  Created by Евгений Никитин on 10.05.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

class CollectionsSet {
    static func getQuestions() -> [Question] {
        return [
            Question(question: ["Сколько основных типов коллекций обеспечивает Swift?",
                                "Swift поддерживает именно столько основных типов коллекций",
                                "Какое количество типов коллекций поддерживается в Swift?"],
                     image: "",
                     optionA: "Два",
                     optionB: "Три",
                     optionC: "Четыре",
                     optionD: "Пять",
                     correctAnswer: 2,
                     questionId: 1,
                     helpText: "Swift обеспечивает три основных типа коллекций - это Массивы, Множества и Словари для хранения коллекций значений."),
            
            Question(question: ["Упорядоченная коллекция значений",
                                "Коллекция с упорядоченными значениями",
                                "Упорядоченные значения, объединенные в коллекцию"],
                     image: "",
                     optionA: "Массив",
                     optionB: "Словарь",
                     optionC: "Множество",
                     optionD: "Набор",
                     correctAnswer: 1,
                     questionId: 2,
                     helpText: "Массивы - это упорядоченные коллекции значений. Массивы хранят много значений одинакового типа в упорядоченном списке. Одно и то же значение в массиве может появиться несколько раз, в разных позициях."),
            
            Question(question: ["Неупорядоченная коллекция уникальных значений",
                                "Уникальные значения, собранные в неупорядоченную коллекцию",
                                "Коллекция неупорядоченных уникальных значений"],
                     image: "",
                     optionA: "Массив",
                     optionB: "Множество",
                     optionC: "Словарь",
                     optionD: "Набор",
                     correctAnswer: 2,
                     questionId: 3,
                     helpText: "Множества - это неупорядоченные коллекции уникальных значений."),
            
            Question(question: ["Неупорядоченная коллекция, хранящая пары ключ-значение",
                                "Коллекция, хранящая неупорядоченные пары ключ-значение",
                                "Неупорядоченные пары ключ-значение хранятся именно в этой коллекции"],
                     image: "",
                     optionA: "Массив",
                     optionB: "Множество",
                     optionC: "Словарь",
                     optionD: "Набор",
                     correctAnswer: 3,
                     questionId: 4,
                     helpText: "Словари - это неупорядоченные коллекции, хранящие пары ключ-значение"),
            
            Question(question: ["Какой тип коллекции на изображении?",
                                "Укажите какой тип коллекции изображен на изображении?",
                                "На этом изображении именно этот тип коллекции"],
                     image: "Collections5",
                     optionA: "Массив",
                     optionB: "Множество",
                     optionC: "Набор",
                     optionD: "Словарь",
                     correctAnswer: 4,
                     questionId: 5,
                     helpText: "На изображении словарь, коллекция пар ключ-значение"),
            
            Question(question: ["Можем ли мы по ошибке вставить значение неверного типа в коллекцию?",
                                "Можем ли мы вставить значение неверного типа в массив?",
                                "Возможно ли вставить значение неверного типа в словарь? "],
                     image: "",
                     optionA: "Нет",
                     optionB: "Да",
                     optionC: "Да, через .append",
                     optionD: "Да, через оператор присваивания",
                     correctAnswer: 1,
                     questionId: 6,
                     helpText: "Массивам, множествам и словарям в Swift всегда понятно, какие типы значений и ключи они могут хранить. Это означает, что вы не можете по ошибке вставить неверное значение в коллекцию. Это также означает, что вы можете быть уверены в типах значений, которые вы получите из коллекции."),
            
            Question(question: ["Если массив или словарь присвоены переменной, можем ли мы их изменять?",
                                "Можем ли мы изменять словарь или массив, если он присвоен переменной?",
                                "Возможно ли изменять словарь, если при создании мы присвоили его переменной?"],
                     image: "",
                     optionA: "Только удалять элементы",
                     optionB: "Только добавлять элементы",
                     optionC: "Да",
                     optionD: "Изменяются только массивы",
                     correctAnswer: 3,
                     questionId: 7,
                     helpText: "Когда вы создаете массив или словарь и присваиваете его переменной, то созданная коллекция будет изменяемой. Это означает, что вы можете изменить коллекцию после ее создания путем добавления, удаления, или изменения элементов этой коллекции. И наоборот, когда вы присвоите массив или словарь константе, то он будет неизменяемым, а его размер и содержимое не может быть изменено."),
            
            Question(question: ["Какой тип коллекции на изображении?",
                                "Укажите какой тип коллекции изображен на изображении?",
                                "На этом изображении именно этот тип коллекции"],
                     image: "Collections8",
                     optionA: "Массив",
                     optionB: "Множество",
                     optionC: "Набор",
                     optionD: "Словарь",
                     correctAnswer: 1,
                     questionId: 8,
                     helpText: "На изображении массив, упорядоченная коллекция значений, доступных по индексу."),
            
            Question(question: ["Какой тип коллекции на изображении?",
                                "Укажите какой тип коллекции изображен на изображении?",
                                "На этом изображении именно этот тип коллекции"],
                     image: "Collections9",
                     optionA: "Массив",
                     optionB: "Множество",
                     optionC: "Набор",
                     optionD: "Словарь",
                     correctAnswer: 2,
                     questionId: 9,
                     helpText: "На изображении множество, неупорядоченная коллекция уникальных значений."),
            
            Question(question: ["Если коллекция присвоена константе, можем ли мы ее изменять?",
                                "Можем ли мы изменять словарь или массив, если он присвоен константе?",
                                "Возможно ли изменять множество, если при создании мы присвоили его константе?"],
                     image: "",
                     optionA: "Можем удалять элементы",
                     optionB: "Можем добавлять элементы",
                     optionC: "Нет",
                     optionD: "Да",
                     correctAnswer: 3,
                     questionId: 10,
                     helpText: "Когда вы присвоите массив или словарь константе, то он будет неизменяемым, а его размер и содержимое не может быть изменено. Хорошей практикой является создание неизменяемых коллекций во всех случаях, когда коллекцию не нужно менять. Делая это, мы позволяем компилятору Swift оптимизировать производительность наших коллекций."),
            
            Question(question: ["Как пишется полная форма записи массива в Swift?",
                                "Полная форма записи массива в Swift пишется так",
                                "Как нужно писать полную форму записи массива в Swift?"],
                     image: "",
                     optionA: "Array<ElementType>",
                     optionB: "[ElementType]",
                     optionC: "[ElementType]()",
                     optionD: "Array(ElementType)[]",
                     correctAnswer: 1,
                     questionId: 11,
                     helpText: "Полная форма записи массива в Swift пишется Array<ElementType>, где ElementType это тип значений, которые могут храниться в массиве."),
            
            Question(question: ["Как пишется сокращенная форма записи массива в Swift?",
                                "Сокращенная форма записи массива в Swift пишется так",
                                "Как нужно писать сокращенную форму записи массива в Swift?"],
                     image: "",
                     optionA: "Array<ElementType>",
                     optionB: "[ElementType]",
                     optionC: "[ElementType]()",
                     optionD: "Array(ElementType)[]",
                     correctAnswer: 2,
                     questionId: 12,
                     helpText: "Вы можете также написать массив в сокращенной форме как [ElementType]. Хотя две формы функционально идентичны, краткая форма является предпочтительной."),
            
            Question(question: ["Как можно создать пустой массив с помощью синтаксиса инициализатора?",
                                "Как вы можете создать пустой массив?",
                                "Пустой массив инициализируется именно так"],
                     image: "",
                     optionA: "var array = [String]()",
                     optionB: "var array = (String)[]",
                     optionC: "var array = [String()]",
                     optionD: "var array: [String]?",
                     correctAnswer: 1,
                     questionId: 13,
                     helpText: "Вы можете создать пустой массив определенного типа с помощью синтаксиса инициализатора: var array = [String]()."),
            
            Question(question: ["Альтернативный способ создания пустого массива",
                                "Альтернативный вариант, как вы можете создать пустой массив",
                                "Пустой массив может инициализироваться именно так"],
                     image: "",
                     optionA: "var array: [String] = []",
                     optionB: "var array: String = []",
                     optionC: "var array = String()",
                     optionD: "var array: [String]?",
                     correctAnswer: 1,
                     questionId: 14,
                     helpText: "В качестве альтернативы синтаксису инизиализатора, вы можете создать пустой массив с помощью пустого литерала массива, который записывается в виде [] (пустой пары квадратных скобок)."),
            
            Question(question: ["Какой тип будет у данного массива ints, и что будет внутри?",
                                "Выберите ответ с правильным типом и содержанием коллекции ints",
                                "Выберите тип и содержание данного массива ints"],
                     image: "Collections15",
                     optionA: "[Double], [0.0, 0.0, 0.0]",
                     optionB: "[Int], [0, 0, 0]",
                     optionC: "[Double], [0, 0, 0]",
                     optionD: "[Int], [0.0, 0.0, 0.0]",
                     correctAnswer: 1,
                     questionId: 15,
                     helpText: "Если не указывать иного, Swift присвоит массиву чисел с плавающей точкой тип [Double], а данный инициализатор массива указывает, что в этом массиве должны быть числа 0.0, повторяющиеся три раза. То есть правильный ответ будет [Double], [0.0, 0.0, 0.0]."),
            
            Question(question: ["Как мы можем создать новый массив, объединив два существующих массива с совместимыми типами?",
                                "Каким образом мы можем создать новый массив из двух существующих (их типа совместимы)?",
                                "Из двух существующих массивов с одинаковым типом необходимо создать новый, как это сделать?"],
                     image: "",
                     optionA: "Cложить (+)",
                     optionB: "Используя интерполяцию",
                     optionC: "Через свойство .remove",
                     optionD: "Логическим оператором И &&",
                     correctAnswer: 1,
                     questionId: 16,
                     helpText: "Вы можете создать новый массив, объединив два существующих массива с совместимыми типами с оператором сложения (+). Новый тип массива выводится из типа двух массивов, которые вы объединяете вместе. Так же можно добавить один массив к другому через firstArray.append(contentsOf: secondArray)."),
            
            Question(question: ["Выберите создание массива через синтаксис литерала массива",
                                "Какой из этих способов описывается как «созадние массива через литерал массива»?",
                                "Мы можем создать массив с помощью синтаксиса литерала массива именно так"],
                     image: "",
                     optionA: "var nums: [Int] = [0, 1, 2, 3]",
                     optionB: "var nums: Int = [0, 1, 2, 3]",
                     optionC: "var nums: [Int] = 0, 1, 2, 3",
                     optionD: "var nums: [Int](0, 1, 2, 3)",
                     correctAnswer: 1,
                     questionId: 17,
                     helpText: "Вы можете инициализировать массив с помощью литерала массива, который является быстрым способом писать одно или несколько значений как набор значений массива. Литерал массива пишется в виде списка значений, разделенных запятыми и окруженными парами скобок: [value 1, value 2, value 3]. Пример: создается массив под названием numbers для хранения Int значений: var number: [Int] = [1, 2, 3, 4, 5]."),
            
            Question(question: ["В каком из этих случаев мы можем не указывать тип массива?",
                                "Выберите вариант, в котором мы можем убрать указание типа массива, и это не вызовет ошибку?",
                                "Выберите вариант, при котором мы можем задать тип массива неявно?"],
                     image: "",
                     optionA: "var array = []",
                     optionB: "var array = [String]()",
                     optionC: "var array = [Int](1, 2, 3)",
                     optionD: "var array: [Int] = [1, 2]",
                     correctAnswer: 4,
                     questionId: 18,
                     helpText: "Благодаря выводу типов Swift, вы можете не писать тип для массива, который вы инициализируйте с помощью литерала массива, хранящего значения того же типа, например var array: [Int] = [1, 2]. Вместо этого, инициализация array может быть записана в сокращенной форме: var array = [1, 2]. Поскольку все значения внутри литерала массива одинакового типа (Int), Swift может вывести, что [Int] является правильным типом для переменной array."),
            
            Question(question: ["Быстрый способ получить количество элементов массива?",
                                "Получить количество элементов массива можно через это свойство",
                                "Какое свойство поможет вам получить количество элементов массива?"],
                     image: "",
                     optionA: "array.count",
                     optionB: "array.sort()",
                     optionC: "array.prefix()",
                     optionD: "array.append()",
                     correctAnswer: 1,
                     questionId: 19,
                     helpText: "Чтобы узнать количество элементов в массиве, проверьте его свойство count."),
            
            Question(question: ["Что выведется в консоль после запуска данного кода?",
                                "Какой результат запуска мы увидим в консоли?",
                                "Выберите вариант, который окажется в консоли после запуска этого кода"],
                     image: "Collections20",
                     optionA: "Array is empty",
                     optionB: "Array is not empty",
                     optionC: "Ничего не выведет",
                     optionD: "Столкнемся с ошибкой",
                     correctAnswer: 1,
                     questionId: 20,
                     helpText: "Логическое свойство isEmpty можно использовать в качестве быстрого способа узнать, является ли свойство count равным 0. В данном примере у нас пустой массив array, значит мы пройдем проверку по первому условию и выведем «Array is empty»"),
            
            Question(question: ["Куда добавляется элемент, когда мы вносим его в массив через .append?",
                                "Где окажется элемент, когда мы добавим его в массив через .append?",
                                "Если мы добавим элемент в массив через .append, где он окажется?"],
                     image: "",
                     optionA: "Вначале массива",
                     optionB: "В конце массива",
                     optionC: "На нулевом индексе",
                     optionD: "Ровно посередине",
                     correctAnswer: 2,
                     questionId: 21,
                     helpText: "Через вызов метода append вы можете добавлять новые элементы в конец массива."),
            
            Question(question: ["Что случится при запуске этого кода?",
                                "Что произойдет, когда мы запустим этот код?",
                                "Какой результат мы получим, после запуска этого кода?"],
                     image: "Collections22",
                     optionA: "Добавим новые элементы",
                     optionB: "Столкнемся с ошибкой",
                     optionC: "Массив не изменится",
                     optionD: "Ничего",
                     correctAnswer: 2,
                     questionId: 22,
                     helpText: "Добавить массив с одним или несколькими совместимыми (типами) элементами можно с помощью оператора сложения с присвоением (+=), но в данном случае мы столкнемся с ошибкой, поскольку numbers является константой."),
            
            Question(question: ["Что будет содержаться внутри массива numbers после выполнения этого кода?",
                                "Какие значения будут содержаться внутри numbers в результате?",
                                "Выберите верный вариант итогового вида массива numbers"],
                     image: "Collections23",
                     optionA: "[1.0, 2.0]",
                     optionB: "[1.0, 2.0, 3, 4, 5]",
                     optionC: "[1, 2, 3, 4, 5]",
                     optionD: "[1.0, 2.0, 3.0, 4.0, 5.0]",
                     correctAnswer: 4,
                     questionId: 23,
                     helpText: "Правильный ответ [1.0, 2.0, 3.0, 4.0, 5.0]. Оператор присваивания со сложением добавит в данный массив значения 3, 4 и 5, но, так как массив numbers имеет тип [Double], значения примут вид 3.0, 4.0, 5.0."),
            
            Question(question: ["Как с помощью синтаксиса сабскриптов извлечь значение из массива?",
                                "В каком из вариантов используется корректное обращение к элементу массива с помощью синтаксиса сабскриптов?",
                                "Как выглядит извлечение из массива с помощью синтаксиса сабскриптов?"],
                     image: "",
                     optionA: "arrayName(0)",
                     optionB: "arrayName[1]",
                     optionC: "arrayName-2",
                     optionD: "arrayName.3",
                     correctAnswer: 2,
                     questionId: 24,
                     helpText: "Можно извлечь значение из массива с помощью синтаксиса сабскриптов, поместив индекс значения, который вы хотите получить, внутри квадратных скобок сразу после имени массива. Первый элемент в массиве имеет индекс 0, а не 1. Массивы в Swift всегда начинаются с 0."),
            
            Question(question: ["Какие элементы будут в массиве numbers после выполнения данного кода?",
                                "Выберите итоговый порядок элементов массива numbers после исполнения данного кода",
                                "После выполнения кода, какой порядок элементов будет у массива numbers?"],
                     image: "Collections25",
                     optionA: "[1.0, 2.0, 3.0, 4.0]",
                     optionB: "[1.0, 2.0, 1.0, 4.0]",
                     optionC: "[1.0, 2.0, 3.0, 1.0]",
                     optionD: "[1.0, 1.0, 3.0, 4.0]",
                     correctAnswer: 2,
                     questionId: 25,
                     helpText: "Вы можете использовать синтаксис сабскриптов для изменения существующего значения по указанному индексу. Правильный ответ: [1.0, 2.0, 1.0, 4.0], поскольку мы инициализируем новое значение элементу массива, который находится на индексе [2], начиная с 0 это будет третий элемент (3.0)."),
            
            Question(question: ["Какие элементы будут в массиве numbers после выполнения данного кода?",
                                "Выберите итоговый порядок элементов массива numbers после исполнения данного кода",
                                "После выполнения кода, какой порядок элементов будет у массива numbers?"],
                     image: "Collections26",
                     optionA: "[1.0, 4.0, 5.0, 6.0]",
                     optionB: "[1.0, 4, 5, 6]",
                     optionC: "[1.0, 2.0, 3.0, 4.0]",
                     optionD: "[4.0, 5.0, 6.0, 4.0]",
                     correctAnswer: 1,
                     questionId: 26,
                     helpText: "Вы можете использовать синтаксис сабскриптов для изменения диапазона значений за раз, даже если набор изменяющих значений имеет разную длину, по сравнению с диапазоном который требуется заменить. Правильный ответ: [1.0, 4.0, 5.0, 6.0], поскольку мы меняем значения с 1 по 3 индекс, а это 2.0, 3.0, 4.0."),
            
            Question(question: ["Какие элементы будут в массиве numbers после выполнения данного кода?",
                                "Выберите итоговый порядок элементов массива numbers после исполнения данного кода",
                                "После выполнения кода, какой порядок элементов будет у массива numbers?"],
                     image: "Collections27",
                     optionA: "[1.0, 2.0, 11.0, 12.0, 13.0, 5.0]",
                     optionB: "[1.0, 2.0, 11.0, 12.0, 5.0]",
                     optionC: "[1.0, 2.0, 11.0, 12.0]",
                     optionD: "[1.0, 2.0, 11.0, 12.0, 13.0]",
                     correctAnswer: 1,
                     questionId: 27,
                     helpText: "Вы можете использовать синтаксис сабскриптов для изменения диапазона значений за раз, даже если набор изменяющих значений имеет разную длину, по сравнению с диапазоном который требуется заменить. Правильный ответ: [1.0, 2.0, 11.0, 12.0, 13.0, 5.0], поскольку мы меняем значения с 2 по 3 индекс, а это 3.0, 4.0, но вставляем уже три элемента, вместо удаленных двух."),
            
            Question(question: ["Вызов какого метода поможет вставить элемент в массив на определенный индекс?",
                                "Чтобы вставить элемент на определенный индекс массива, какой мы будем использовать метод?",
                                "Какой метод нужно использовать, чтобы вставить элемент на определенный индекс массива?"],
                     image: "",
                     optionA: "insert(_:at:)",
                     optionB: ".append",
                     optionC: "add(_:at:)",
                     optionD: "remove(_ :at:)",
                     correctAnswer: 1,
                     questionId: 28,
                     helpText: "Для вставки элемента по заданному индексу внутрь массива, вызовите его метод insert(_:at:)."),
            
            Question(question: ["Вызов какого метода поможет удалить элемент из массива с определенного индекса?",
                                "Чтобы удалить элемент с определенного индекса массива, какой мы будем использовать метод?",
                                "Какой метод нужно использовать, чтобы удалить элемент с определенного индекса массива?"],
                     image: "",
                     optionA: "insert(_:at:)",
                     optionB: ".append",
                     optionC: "add(_:at:)",
                     optionD: "remove(_ :at:)",
                     correctAnswer: 4,
                     questionId: 29,
                     helpText: "Можно удалить элемент из массива с помощью метода remove(at:). Этот метод удаляет элемент с указанным индексом и возвращает удалённый элемент (хотя вы можете проигнорировать возвращаемое значение, если оно вам не нужно)."),
            
            Question(question: ["Что будет, если вы попытаетесь получить доступ или изменить значение индекса, который находится за пределами существующих границ массива?",
                                "Если вы попытаетесь изменить значение индекса, который находится за пределами существующих границ массива, что произойдет?"],
                     image: "",
                     optionA: "Ошибка исполнения",
                     optionB: "Вернется nil",
                     optionC: "Ничего не произойдет",
                     optionD: "Вернется последний элемент",
                     correctAnswer: 1,
                     questionId: 30,
                     helpText: "Если вы пытаетесь получить доступ или изменить значение индекса, который находится за пределами существующих границ массива, у вас будет ошибка исполнения. Вы можете проверить, действителен ли индекс, прежде чем его использовать, сравнив его с свойством count массива. За исключением случаев, когда count равен 0 (то есть массив пуст), самый большой валидный индекс в массиве всегда будет count - 1, так как массивы индексируются c нуля."),
        ]
    }
}
