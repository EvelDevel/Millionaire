
//  Created by Евгений Никитин on 15.04.2020.
//  Copyright © 2020 Evel-Devel. All rights reserved.

import Foundation

class TypesOfDataSet {
    static func getQuestions() -> [Question] {
        return [
            Question(question: ["Тип данных, отвечающий за хранение отдельных Unicode-символов",
                                "Какой тип хранит отдельные символы?",
                                "Отдельные Unicode-символы хранятся именно в этом типе данных"],
                     image: "",
                     optionA: "Bool",
                     optionB: "Float",
                     optionC: "Character",
                     optionD: "String",
                     correctAnswer: 3,
                     questionId: 1,
                     helpText: "Для работы с текстом применяются два типа данных: Character и String. Character отвечает за хранение отдельных Unicode-символов, а String - за хранение произвольной текстовой информации."),
            
            Question(question: ["Тип данных, отвечающий за хранение произвольной текстовой информации",
                                "Какой тип данных хранит произвольный текст?",
                                "Произвольный строковый литерал можно хранить именно в этом типе"],
                     image: "",
                     optionA: "Float",
                     optionB: "String",
                     optionC: "Character",
                     optionD: "Bool",
                     correctAnswer: 2,
                     questionId: 2,
                     helpText: "Для работы с текстом применяются два типа данных: Character и String. Character отвечает за хранение отдельных Unicode-символов, а String - за хранение произвольной текстовой информации."),
            
            Question(question: ["Какой тип данных хранит числа, не содержащие дробной части (например 42 или -23)?",
                                "В каком типе храняться целые числа со знаком?",
                                "Любые целые числа без дробной части хранятся именно в этом типе"],
                     image: "",
                     optionA: "UInt",
                     optionB: "Int",
                     optionC: "Float",
                     optionD: "Double",
                     correctAnswer: 2,
                     questionId: 3,
                     helpText: "Int: целое число со знаком, например, 1, -30, 458. На 32-разрядных платформах эквивалентен Int32, а на 64-разрядных - Int64."),
            
            Question(question: ["Все типы в Swift пишутся с ...",
                                "С какой буквы надо писать все типы в Свифт?",
                                "Именно с этой буквы пишутся все типы в Swift"],
                     image: "",
                     optionA: "Строчной буквы",
                     optionB: "Греческой цифры",
                     optionC: "Заглавной буквы",
                     optionD: "Текущей даты",
                     correctAnswer: 3,
                     questionId: 4,
                     helpText: "Все типы в Swift пишутся с заглавной буквы, просто запомните это."),
            
            Question(question: ["Как получить доступ к минимальному и максимальному значению каждого типа целого числа?",
                                "Как получить минимальное и максимальное число у Int или UInt?",
                                "Именно через эти свойства мы можем получить доступ к максимальному и минимальному числу Int и UInt"],
                     image: "",
                     optionA: "first и last",
                     optionB: "min и max",
                     optionC: "count",
                     optionD: "first и max",
                     correctAnswer: 2,
                     questionId: 5,
                     helpText: "Вы можете получить минимальное и максимальное значение каждого числа с помощью свойств min и max."),
            
            Question(question: ["Какой тип может хранить более длинные дробные числа?",
                                "В каком типе с плавающей точкой может храниться более длинная дробная часть?",
                                "Именно в этом типе может храниться наибольшее число десятичных знаков"],
                     image: "",
                     optionA: "Double",
                     optionB: "Float",
                     optionC: "Character",
                     optionD: "String",
                     correctAnswer: 1,
                     questionId: 6,
                     helpText: "Double является 64битным числом с плавающей точкой – его следует использовать, когда значения должны быть очень большими или особенно точными. Он имеет точность в 15 десятичных знаков, тогда как Float – только 6."),
            
            Question(question: ["Какой тип хранит только положительные целые числа?",
                                "Тип, хранящий только целые числа без знака",
                                "В этом типе могут храниться только положительные целые числа"],
                     image: "",
                     optionA: "Int",
                     optionB: "Int64",
                     optionC: "UInt",
                     optionD: "Character",
                     correctAnswer: 3,
                     questionId: 7,
                     helpText: "Swift предусматривает беззнаковый тип целого числа - UInt (Unsigned integer), который имеет тот же размер что и разрядность системы. Используйте UInt, только когда вам действительно нужен тип беззнакового целого числа. Если это не так, использовать Int предпочтительнее, даже когда известно, что значения будут неотрицательными. Постоянное использование Int для целых чисел способствует совместимости кода, позволяет избежать преобразования между разными типами чисел, и соответствует выводу типа целого числа."),
            
            Question(question: ["Фиксированная последовательность символов, окруженная двойными кавычками",
                                "Последовательность произвольных символов внутри двойных кавычек",
                                "Этот литерал состоит из какой-либо последовательности символов"],
                     image: "",
                     optionA: "Числовой литерал",
                     optionB: "Строковый литерал",
                     optionC: "Литерал",
                     optionD: "Натурал",
                     correctAnswer: 2,
                     questionId: 8,
                     helpText: "Фиксированная последовательность символов, окруженная двойными кавычками, называется строковым литералом. Обычно используется как начальное значение для инициализации константы или переменной, при этом тип можно объявить неявно."),
            
            Question(question: ["Фиксированная последовательность цифр",
                                "Последовательность цифр, начинающаяся с префиксного оператора «-» или «+»",
                                "Как называется любой из этих примеров: «-2234», «10», «0»?"],
                     image: "",
                     optionA: "Оператор",
                     optionB: "Числовой литерал",
                     optionC: "Строковый литерал",
                     optionD: "Случайное число",
                     correctAnswer: 2,
                     questionId: 9,
                     helpText: "Фиксированная последовательность цифр, начинающаяся либо с цифры, либо с префиксного оператора «минус» или «плюс», называется числовым литералом."),
            
            Question(question: ["Как можно объявлять тип данных?",
                                "В Swift можно объявить тип данных несколькими способами, как?",
                                "Именно так в Swift можно объявлять тип данных у константы или переменной"],
                     image: "",
                     optionA: "Внятно",
                     optionB: "Неявно",
                     optionC: "Явно и Неявно",
                     optionD: "Внятно или Явно",
                     correctAnswer: 3,
                     questionId: 10,
                     helpText: "Явно, указывая тип данных при объявлении переменной, через двоеточие. Либо неявно, инициализируя значение в переменной или константе (из которого XCode поймет, какой тип данных присвоить этому значению)."),
            
            Question(question: ["Можно ли использовать переменную с явным, не опциональным типом данных, до ее инициализации?",
                                "Есть переменная с явным, не опциональным типом данных, можете ли вы использовать ее до инициализации?",
                                "Можно ли использовать переменную до инициализации, если она не является опционалом?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "Не совсем",
                     optionD: "Затрудняюсь ответить",
                     correctAnswer: 2,
                     questionId: 11,
                     helpText: "Использование переменной или константы до ее инициализации в Swift невозможно (кроме значений с опциональными типами)."),
            
            Question(question: ["Какой тип может хранить любое целое число в пределах от -2 147 483 648 до 2 147 483 647?",
                                "Тип, умеющий хранить любое целое число от -2 147 483 648 до 2 147 483 647?",
                                "Именно этот тип может хранить любое целое число от -2 147 483 648 до 2 147 483 647"],
                     image: "",
                     optionA: "Uint32",
                     optionB: "Decimal",
                     optionC: "Int32",
                     optionD: "Int64",
                     correctAnswer: 3,
                     questionId: 12,
                     helpText: "Значения от -2 147 483 648 до 2 147 483 647 соответствуют Int32."),
            
            Question(question: ["Если в коде не указать размер целого числа, каким оно будет?",
                                "Каким будет размер числа, если не указать конкретное значение при явном объявлении типа?",
                                "Каким установится размер целого числа, если в коде не указать его явно?"],
                     image: "",
                     optionA: "Согласно разрядности системы",
                     optionB: "32",
                     optionC: "64",
                     optionD: "128",
                     correctAnswer: 1,
                     questionId: 13,
                     helpText: "Если не указано иного, то размер числа всегда соответствует разрядности системы."),
            
            Question(question: ["Как называется объявление переменной с присваиванием ей значения?",
                                "Объявление переменной с присваиванием ей значения",
                                "Установка начального значения после объявления переменной?"],
                     image: "",
                     optionA: "Инаугурация",
                     optionB: "Возведение",
                     optionC: "Объявление",
                     optionD: "Инициализация",
                     correctAnswer: 4,
                     questionId: 14,
                     helpText: "Инициализация - подготовительный процесс экземпляра класса, структуры или перечисления для дальнейшего использования. Этот процесс включает в себя установку начальных значений для каждого свойства хранения этого экземпляра и проведение любых настроек или инициализации, которые нужны до того, как экземпляр будет использоваться."),
            
            Question(question: ["Какую точность в десятичных знаках имеет тип Double?",
                                "Сколько десятичных цифр может хранить тип Double?",
                                "Double может хранить именно столько цифр после запятой"],
                     image: "",
                     optionA: "15 десятичных цифр",
                     optionB: "6 десятичных цифр",
                     optionC: "12 десятичных цифр",
                     optionD: "18 десятичных цифр",
                     correctAnswer: 1,
                     questionId: 15,
                     helpText: "Double является 64битным числом с плавающей точкой. Он имеет точность в 15 десятичных знаков."),
            
            Question(question: ["Какую точность в десятичных знаках имеет тип Float?",
                                "Сколько десятичных цифр может хранить тип Float?",
                                "Float может хранить именно столько цифр после запятой"],
                     image: "",
                     optionA: "4 десятичных цифр",
                     optionB: "6 десятичных цифр",
                     optionC: "12 десятичных цифр",
                     optionD: "10 десятичных цифр",
                     correctAnswer: 2,
                     questionId: 16,
                     helpText: "Float имеет точность в 6 десятичных знаков."),
            
            Question(question: ["Если равноценно использование обоих типов с плавающей точкой, использование какого предпочтительнее?",
                                "В случаях, где возможно использование обоих типов (Float и Double), какой предпочтительнее?",
                                "В ситуациях, где нужна бОльшая точность вычислений, какой тип необходимо использовать?"],
                     image: "",
                     optionA: "Double",
                     optionB: "Float",
                     optionC: "Character",
                     optionD: "String",
                     correctAnswer: 1,
                     questionId: 17,
                     helpText: "Double имеет точность минимум 15 десятичных цифр, в то время как точность Float может быть всего лишь 6 десятичных цифр. Соответствующий тип числа с плавающей точкой используется в зависимости от характера и диапазона значений, c которыми вы должны работать в коде. В случаях, где возможно использование обоих типов, предпочтительным считается Double."),
            
            Question(question: ["Можете ли вы передать тип Int, если некоторая часть кода ожидает тип String?",
                                "Если некоторая часть кода ожидает тип String, можете ли вы передать Character?",
                                "Можете ли вы передать положительное число типа Int32, если некоторая часть кода ожидает Uint32?"],
                     image: "",
                     optionA: "Да",
                     optionB: "Нет",
                     optionC: "В некоторых случаях",
                     optionD: "По настроению",
                     correctAnswer: 2,
                     questionId: 18,
                     helpText: "Swift - язык со строгой типизацией. Язык со строгой типизацией призывает вас иметь четкое представление о типах значений, с которыми может работать ваш код. Если часть вашего кода ожидает String (например), вы не сможете передать ему Int (или любой другой тип, кроме String) по ошибке."),
            
            Question(question: ["Cколько двойных кавычек нужно ставить при открытии и закрытии многострочного строкового литерала?",
                                "Какое количество двойных кавычек ставится при открытии многострочного строкового литерала?",
                                "При закрытии открытии многострочного строкового литерала ставится именно столько двойных кавычек"],
                     image: "",
                     optionA: "1",
                     optionB: "2",
                     optionC: "3",
                     optionD: "4",
                     correctAnswer: 3,
                     questionId: 19,
                     helpText: "Если вам нужно создать строку, которая поддерживает многострочный вид, используйте литерал многострочной строки - последовательность символов, обернутых в три двойные кавычки. Многострочный литерал строки включает в себя все строки между тремя открывающими и тремя закрывающими кавычками. Строка начинается на первой строке после открывающих кавычек, а заканчивается на строке предшествующей закрывающим кавычкам."),
            
            Question(question: ["Каким символом осуществляется перенос строки в многострочном строковом литерале (в коде), позволяющий не отображать символ переноса строки в качестве части значения этой строки?",
                                "Этот символ может перенести строку многострочного литерала только внутри кода (для лучшего чтения), не отображая перенос строки как часть значения этой строки"],
                     image: "",
                     optionA: "Звездочка",
                     optionB: "Обратный слеш",
                     optionC: "Нажимаем Enter",
                     optionD: "Тире",
                     correctAnswer: 2,
                     questionId: 20,
                     helpText: "Если вы хотите использовать символ переноса строки для того, чтобы сделать ваш код более читаемым, но вы не хотите чтобы символ переноса строки отображался в качестве части значения строки, то вам нужно использовать символ обратного слеша в конце этих строк. Проще говоря, если вы хотите перенести строку внутри кода, чтобы сделать его более читаемым, но не хотите, чтобы после компиляции эта строка также перенеслась."),
            
            Question(question: ["Как можно инициализировать пустую строку?",
                                "Как инициализируется пустой тип String?",
                                "Инициализация пустой строки происходит именно таким(ими) способом(ами)"],
                     image: "",
                     optionA: "= (String))",
                     optionB: "= [String]",
                     optionC: "= String()",
                     optionD: "Затрудняюсь ответить",
                     correctAnswer: 3,
                     questionId: 21,
                     helpText: "Чтобы создать пустое String значение в качестве отправной точки для создания более длинных строк, либо присвойте литерал пустой строки к переменной, либо инициализируйте объект String c помощью синтаксиса инициализации: = String()."),
            
            Question(question: ["Способ создать новое значение типа String из разных констант, переменных, литералов и выражений, включая их значения в строковый литерал",
                                "Создание нового String-значения из разных констант, переменных, литералов и выражений, включая их значения в строковый литерал",
                                "Включение разных значений в String, используя обратный слеш и круглые скобки, называется?"],
                     image: "",
                     optionA: "Конкатенация",
                     optionB: "Интерполяция",
                     optionC: "Объединение строк",
                     optionD: "Вкрапление значений",
                     correctAnswer: 2,
                     questionId: 22,
                     helpText: "Интерполяция строк - способ создать новое значение типа String из разных констант, переменных, литералов и выражений, включая их значения в строковый литерал. Каждый элемент, который вы вставляете в строковый литерал, должен быть помещен в скобки и находиться внутри двойных кавычек литерала, а перед открывающей скобкой должен стоять знак обратного слэша."),
            
            Question(question: ["Каким образом можно добавить значение типа Character к переменной типа String?",
                                "Как мы можем добавить один Character к переменной типа String?",
                                "Используя какой метод мы можем добавить Character к переменной String?"],
                     image: "",
                     optionA: "Комбинированные операторы",
                     optionB: "Конкатенация",
                     optionC: "Приведение типов",
                     optionD: "Используя String append",
                     correctAnswer: 4,
                     questionId: 23,
                     helpText: "Вы можете добавить значение типа Character к переменной типа String, используя метод String append. Вы не можете добавить String или Character к уже существующей переменной типа Character, потому что значение типа Character должно состоять только из одиночного символа."),
            
            Question(question: ["Можно ли сравнивать две строки?",
                                "Возможно ли сравнение двух значений типа String?",
                                "Можем ли мы сравнить два значения String?"],
                     image: "",
                     optionA: "Нет",
                     optionB: "Только ==",
                     optionC: "Только !=",
                     optionD: "На равенство == и неравенство !=",
                     correctAnswer: 4,
                     questionId: 24,
                     helpText: "Swift предусматривает три способа сравнения текстовых значений: равенство строк и символов, равенство префиксов, и равенство суффиксов. Равенство строк и символов проверяется оператором равенства (==) и оператором неравенства (!=). Два String значения (или два Character значения) считаются равными, если их расширенные наборы графем канонически эквивалентны. Расширенные наборы графем канонически эквивалентны, если они имеют один и тот же языковой смысл и внешний вид, даже если они изначально состоят из разных скалярных величин Юникода."),
            
            Question(question: ["Что вернется, при сравнении двух String?",
                                "Какой тип вернется в результате сравнения двух String значений?",
                                "Что мы получим после сравнения двух Character?"],
                     image: "",
                     optionA: "Bool",
                     optionB: "String",
                     optionC: "Character",
                     optionD: "+ или -",
                     correctAnswer: 1,
                     questionId: 25,
                     helpText: "При сравнении String или Character возвращается Bool-значение (true false).")
            ]
    }
}


